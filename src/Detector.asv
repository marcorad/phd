classdef Detector < handle

    properties
        dlscalogram DataLoader2
        dlscat DataLoader2
        foldername
        path
        noiseEstimate
        annotationTable
        scatfs
        scatfb Scattering
        scat1size
    end

    properties(Constant)
        datapath = "D:\\Whale Data\\Raw Audio Data\\"; 
        Tmf = 0.6;
        Tmfscat = 10;
        ScatP = 50;
    end

    methods

        function sw = ScatteringNoiseEstimate(obj, s) 
            M = floor(obj.Tmfscat * obj.scatfs / 2)*2 + 1;
            s = smoothdata(s, 2, "movmedian", M);
            sw = prctile(s, obj.ScatP, 2);
        end

        function obj = Detector(foldername, annsig)
            obj.foldername = foldername;
            obj.path = SpectrogramCreator.datapath + string(foldername);
            obj.dlscalogram = DataLoader2(obj.path + "\\spectrograms", "mat", "parallel", true);
            obj.noiseEstimate = load(obj.path + "\\noise\\NoiseEstimate.mat").noiseEstimates;
            obj.annotationTable = load(obj.path + "\\annotations\\annotations.mat").annotationTable;
            obj.annotationTable = obj.annotationTable(obj.annotationTable.AnnotationSignificance <= annsig, :);
            obj.dlscat = DataLoader2(obj.path + "\\spectrograms", "mat", "parallel", true);
            obj.scatfb = load(path + "\\scattering\\fb.mat", "fb");
            obj.scatfs = obj.scatfb.filterBanks(1).getSSamplingFreq();
            obj.scat1size = numel(obj.scatfb.filterBanks(1).lambdas);
        end

        function detections(obj)
            sdir = obj.path + "\\detectors\\";
            mkdir(sdir);
            obj.dlscat.startWaitbar();
            spmd %for spmdIndex = 1
                D = {};            
                while ~obj.dlscat.isComplete(spmdIndex)
                    [s, info, fs] = obj.dlscat.next(spmdIndex);
                    s = s.^2;
                    fid = info.fid;
                    noise = obj.ScatteringNoiseEstimate(s);
                    sw = s./noise;
                    M = floor(Detector.Tmf * fs)*2 + 1;
                    detectors.segmms1 = SEGMM(M);
                    detectors.segmmwhite = SEGMM(M);
                    detectors.segmmwhite = SEGMM(M);
                    detectors.segmmwhite = SEGMM(M);
                    detectors.bled = BLED();
                    detectors.bledwhite = BLED();
                    detectors.segmm.detect(s);
                    detectors.bled.detect(s);
                    detectors.segmmwhite.detect(sw);
                    detectors.segmmwhitegauss.detect(swg);
                    detectors.bledwhite.detect(sw);
                    detectors.info = info;
                    
                    anns = obj.annotationTable(obj.annotationTable.FileID == fid, :);
                    truelabels = zeros(1, size(s, 2));
                    for i = 1:size(anns, 1)
                        sidx = anns.SpectrogramStartIndex(i);
                        eidx = anns.SpectrogramEndIndex(i);
                        truelabels(sidx:eidx) = 1;
                    end
                    detectors.annotations = anns;
                    detectors.truelabels = truelabels;

                    D{end + 1} = detectors;
                end
        
            end
            D = [D{:}];
            D = [D{:}];
            save(sdir + "\\detectors.mat", "D", '-mat');
        end
    end

end