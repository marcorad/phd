classes = ["Bm_Ant_A", "Bm_Ant_B", "Bm_Ant_Z", "Bm_D", "Bp_20Plus"];
alphas = [0.52,0.39,0.52,0.14,0.26];
gammas = [0.43,0.43,0.54,0.89,1];

folder = "D:\Whale Data\Raw Audio Data\CaseyIslands2017";
data = load(folder + "\features\features.mat").data;

for i=1:numel(classes)

    class = classes_to_sweep(i)
    alpha = alphas(i);
    gamma = gammas(i);   

    %prepare the data
    X = data{:, "Features"};
    X = double(X);
    y = data{:, "Annotation"};
    
    %remove irrelevant classes
    idx = ~contains(y, "Multiple");
    idx = idx & all(~isnan(X), 2);
    y = y(idx);

    sigp = 1 - alpha;
    prior = struct("Bm_Ant_A",sigp,"Bm_Ant_B",sigp,"Bm_Ant_Z",sigp,"Bm_Ant",sigp, "Bm_D", sigp, "Bp_20Plus", sigp, "Noise", alpha);
    cls = Discriminant(gamma, "linear", 0);
    [Xtrain, ytrain, Xtest, ytest] = split(Xn, y, 0.8, 0.8);
    cls.fit(Xtrain, ytrain, prior);

    yhat = cls.predict(X);

    data(idx, sprintf("Predict_%s", class)) = yhat;

end

Nplot = 100;

files = unique(data(:, "File"));
idx = randperm(numel(files), Nplot);

fb = load(folder + "\scattering\filterbank.mat").fb;
fs = fb.filterBanks(1).getSSamplingFreq();
f = fb.filterBanks(1).fc;

ftext = f(end - 4:4:)

for i = 1:1
    fileidx = idx(i);
    fname = files(fileidx);
    s = load(folder + "\scattering\" + fname).s;
    fig = figure;
    fig.Position = [0, 0, 4000, 800];
    D = data(data.File == fname, :);
    t = (0:size(s, 2)-1)/fs;
    Tools.plotTF(s, f, true, true, t);
    for j = 1:size(D, 1)
        detection = D(j, :);
        tbox = ([detection.StartIndex detection.EndIndex]-1)/fs;
        tbox = [tbox tbox];
        fbox = [fc(5) fc(end-5) fc(end-5) fc(5)];
        fill(tbox, fbox, 'r-', FaceAlpha=0.2);
        for k = 1:numel(classes)
            class = classes(k);
            col = sprintf("Predict_%s", class);
        end
    end
end