classdef SEGMM < handle
    properties(Constant)
        MaxGMMIter = 200;
        PosteriorThresh = 0.5;
    end

    properties
        M %median filtering window size
        H %filtered spectral entropy
        probs %modified signal probability
        mu_n %noise mean
        mu_s %signal mean
        sigma_n %noise std
        sigma_s %signal std
        converged %GMM convergence
        n_iter %iterations for convergence
        LL %model log-likelihood
        mon %is the posterior monotonic
        fmin %minimum value of the posterior
        fmax %maximum value of the posterior
        Ht %thresholded to set entropy for binary detection
        contam %amount of class contaminamation
        Hmin %minimum entropy
        Hmax %maximum entropy
        dir %direction in which the posterior is not monotonic
        lim %the value at which monotonicity breaks
        pi_n %proportion of noise
        pi_s %proportion of signal
        f %the posterior function
        fmod %the modified posterior function
        x %values to evaluate the posterior function
        pdf %PDF evaluated at x
        beta %beta for k-means
        g %gain for k-means
        KLDiv_ns %the KL divergence between the 2 gaussians as measure of distance KL(f_n||f_s)
        KLDiv_sn %the KL divergence between the 2 gaussians as measure of distance KL(f_s||f_n)
    end

    methods(Static)
        function kld = KLD(mup, sigmap, muq, sigmaq)
            varp = sigmap^2;
            varq = sigmaq^2;
            kld = 0.5*(log(varq/varp) - 1 + (mup-muq)^2/varq + varp/varq);
        end
    end

    methods
        
        
        function calcKLDiv(this)
            this.KLDiv_sn = this.KLD(this.mu_s, this.sigma_s, this.mu_n, this.sigma_n);
            this.KLDiv_ns = this.KLD(this.mu_n, this.sigma_n, this.mu_s, this.sigma_s);
        end

        function this = SEGMM(M)
            this.M = M;
        end

        %get the GMM-related values in a structure for easy analysis and
        %reduced memory usage
        function stats = getStatistics(this)
            stats.mu_n = this.mu_n;
            stats.mu_s = this.mu_s;
            stats.sigma_n = this.sigma_n;
            stats.sigma_s = this.sigma_s;
            stats.converged = this.converged;
            stats.n_iter = this.n_iter;
            stats.LL = this.LL;
            stats.mon = this.mon;
            stats.contam = this.contam;
            stats.pi_n = this.pi_n;
            stats.pi_s = this.pi_s;
            stats.delta = this.mu_n - this.mu_s;
        end

        function calculateSE(this, S)
            % Generate spectral entropy measure from TF decomposition S.
            % Requires S to be KxT matrix, where K is the frequency bins
            % and T is the number of time steps.
            P = S ./ sum(S,1); %treat as pdf
            Plog = log(P); %log pdf
            this.H = -sum(P.*Plog, 1);
        end

        function detect(this, S, usekmeans)
            % Get the soft signal classification probabilities and entropy
            % class means, median-filtered with an ODD window of length this.M.
            this.calculateSE(S);
            this.H = smoothdata(this.H, 2, "movmedian", this.M);
            this.Hmin = min(this.H);
            this.Hmax = max(this.H);
            if nargin < 3
                usekmeans = false;
            end
            if usekmeans
            this.fitKMeans();
            else
            this.fitGMM();
            end
        end

        function fitKMeans(this)
            % Perform k-means to determine the entropy class means.
            mus = [max(this.H); min(this.H)];
            Mprev = mus+100;
            epsilon = 1e-7;
            this.converged = false;
            for i=1:SEGMM.MaxGMMIter
                if max(abs(Mprev-mus)) < epsilon
                    this.converged = true;
                    break;
                end
                D = (this.H - mus).^2; %distances
                [~,S] = min(D,[],1); %assignment
                Mprev = mus;
                mus(1) = mean(this.H(S==1));
                mus(2) = mean(this.H(S==2));
            end
            this.beta = mus(1) + (mus(2) - mus(1))/2;
            this.mu_n = mus(1);
            this.mu_s = mus(2);
            p = 0.99;
            this.g = (this.mu_n - this.mu_s)/(this.mu_s - this.beta)/2*log(1/p-1);
            Hs = 2*this.g*(this.H - this.beta)/(this.mu_n - this.mu_s);
            this.probs = 1./(1 + exp(Hs));
        end

        function fitGMM(this)
            this.mu_n = max(this.H);
            this.mu_s = min(this.H);
            sigma = std(this.H);
            this.sigma_s = 0.5*sigma;
            this.sigma_n = this.sigma_s;
            this.LL = inf;
            this.pi_s = 0.5;
            this.pi_n = 0.5;
            N = numel(this.H);
            this.n_iter = 0;
            while this.n_iter < SignalDetection.MaxGMMIter
                p_s = this.pi_s * normpdf(this.H, this.mu_s, this.sigma_s);
                p_n = this.pi_n * normpdf(this.H, this.mu_n, this.sigma_n);
                LL_prev = this.LL;
                this.LL = sum(log(p_s + p_n));
                if abs(this.LL - LL_prev) < 1e-6
                    break;
                end
                gamma_s = p_s ./ (p_s + p_n);
                gamma_n = 1 - gamma_s;
                N_s = sum(gamma_s);
                N_n = N - N_s;
                this.mu_s = sum(gamma_s .* this.H) / N_s;
                this.mu_n = sum(gamma_n .* this.H) / N_n;
                this.sigma_s = sqrt(sum(gamma_s .* (this.H - this.mu_s).^2)/N_s);
                this.sigma_n = sqrt(sum(gamma_n .*(this.H - this.mu_n).^2)/N_n);
                this.pi_s = N_s/N;
                this.pi_n = 1 - this.pi_s;
                this.n_iter = this.n_iter + 1;
            end
            this.converged = this.n_iter < SEGMM.MaxGMMIter;
            this.probs = gamma_s;
            if this.mu_s > this.mu_n
                [this.mu_n, this.mu_s] = swap(this.mu_n, this.mu_s);
                [this.sigma_n, this.sigma_s] = swap(this.sigma_n, this.sigma_s);
                [this.pi_n, this.pi_s] = swap(this.pi_n, this.pi_s);
                this.probs = gamma_n;
            end

            %Take care of the monotonicity problems
            this.determineMonotonicity();
            this.modifiedPosterior()

            if ~this.mon
                if this.dir == "min"
                    this.probs(this.H < this.lim) = this.fmax;
                elseif this.dir == "max"
                    this.probs(this.H > this.lim) = this.fmin;
                end
            end

%             minp = min(this.probs);
%             maxp = max(this.probs);
%             this.probs = (this.probs - minp)/(maxp - minp);
            
            this.contam = this.pi_n*normcdf(this.Ht, this.mu_n, this.sigma_n)/(this.pi_s*normcdf(this.Ht, this.mu_s, this.sigma_s));           
            
            this.calculatePDF();
            this.calcKLDiv();
        end

        function modifiedPosterior(this)
            this.x = linspace(this.Hmin, this.Hmax, 1000);
            ps = normpdf(this.x, this.mu_s, this.sigma_s) * this.pi_s;
            pn = normpdf(this.x, this.mu_n, this.sigma_n) * this.pi_n;
            this.f = ps./(pn+ps);
            this.fmod = this.f;
            this.fmax = max(this.f);
            this.fmin = min(this.f);
            if ~this.mon
                if this.dir == "min"
                    this.fmod(this.x < this.lim) = this.fmax;
                elseif this.dir == "max"
                    this.fmod(this.x > this.lim) = this.fmin;
                end
            end
            this.Ht = this.x(find(this.f <= SEGMM.PosteriorThresh, 1, "first"));
        end

        function determineMonotonicity(this)
            this.lim = (this.sigma_s^2*this.mu_n - this.sigma_n^2*this.mu_s)/(this.sigma_s^2 - this.sigma_n^2);
            if this.sigma_s > this.sigma_n
                this.dir = "max";
                this.mon = this.Hmax < this.lim;
            else
                this.dir = "min";
                this.mon = this.Hmin > this.lim;
            end
        end

        function calculatePDF(this)
            this.pdf(1, :) = normpdf(this.x, this.mu_s, this.sigma_s);
            this.pdf(2, :) = normpdf(this.x, this.mu_n, this.sigma_n);
        end

    end

end